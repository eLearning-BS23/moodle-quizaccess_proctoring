let isCameraAllowed=!1;define("quizaccess_proctoring/proctoring",["jquery","core/ajax","core/notification"],(function($,Ajax,Notification){function hideButtons(){$(".mod_quiz-next-nav").prop("disabled",!0),$(".submitbtns").html('<p class="text text-red red">You need to enable web camera before submitting this quiz!</p>')}$("#id_submitbutton").prop("disabled",!0),$((function(){$("#id_submitbutton").prop("disabled",!0),$("#id_proctoring").on("change",(function(){this.checked&&isCameraAllowed?$("#id_submitbutton").prop("disabled",!1):$("#id_submitbutton").prop("disabled",!0)}))}));const removeNotifications=()=>{const alertElements=document.getElementsByClassName("alert");alertElements.length>0&&alertElements.forEach((alertDiv=>{console.log(alertDiv),alertDiv.style.display="none"}))};let takepicturedelay=3e4;const detectface=async(input,croppedImage)=>{const output=await faceapi.detectAllFaces(input);if(0===output.length);else{let detections=output[0].box;await(async(imageRef,box,croppedImage)=>{const regionsToExtract=[new faceapi.Rect(box.x,box.y,box.width,box.height)];let faceImages=await faceapi.extractFaces(imageRef,regionsToExtract);0===faceImages.length?console.log("Face not found"):faceImages.forEach((cnv=>{croppedImage.src=cnv.toDataURL()}))})(input,detections,croppedImage)}};return{async setup(props,modelurl){if(await faceapi.nets.ssdMobilenetv1.loadFromUri(modelurl),takepicturedelay=props.camshotdelay,null!==document.getElementById("page-mod-quiz-summary")&&document.getElementById("page-mod-quiz-summary").innerHTML.length)return!1;if(null!==document.getElementById("page-mod-quiz-review")&&document.getElementById("page-mod-quiz-review").innerHTML.length)return!1;const width=props.image_width;let height=0,streaming=!1,data=null;$("#mod_quiz_navblock").append('<div class="card-body p-3"><h3 class="no text-left">Webcam</h3> <br/><video id="video">Video stream not available.</video><img id="cropimg" src="" alt=""/><canvas id="canvas" style="display:none;"></canvas><div class="output" style="display:none;"><img id="photo" alt="The picture will appear in this box."/></div></div>');const video=document.getElementById("video"),canvas=document.getElementById("canvas"),photo=document.getElementById("photo"),takepicture=async()=>{const context=canvas.getContext("2d");if(width&&height){canvas.width=width,canvas.height=height,context.drawImage(video,0,0,width,height),data=canvas.toDataURL("image/png"),console.log(data),photo.setAttribute("src",data),props.webcampicture=data;let faceFound,faceImage,croppedImage=$("#cropimg");await detectface(photo,croppedImage),console.log(croppedImage.src),croppedImage.src?(console.log("Face found"),removeNotifications(),faceFound=1,faceImage=croppedImage.src):(console.log("Face not found"),message="Face not found. Try changing your camera to a better lighting. Thanks.",type="error",removeNotifications(),Notification.addNotification({message:message,type:type}),faceFound=0,faceImage="");var request={methodname:"quizaccess_proctoring_send_camshot",args:{courseid:props.courseid,screenshotid:props.id,quizid:props.quizid,webcampicture:data,imagetype:1,parenttype:"camshot_image",faceimage:faceImage,facefound:faceFound}};Ajax.call([request])[0].done((function(res){res.warnings.length<1||video&&Notification.addNotification({message:"Something went wrong during taking the image.",type:"error"})})).fail(Notification.exception)}else(()=>{const context=canvas.getContext("2d");context.fillStyle="#AAA",context.fillRect(0,0,canvas.width,canvas.height),data=canvas.toDataURL("image/png"),photo.setAttribute("src",data)})();var message,type};return navigator.mediaDevices.getUserMedia({video:!0,audio:!1}).then((function(stream){video.srcObject=stream,video.play(),isCameraAllowed=!0})).catch((function(){hideButtons()})),video?(video.addEventListener("canplay",(function(){streaming||(height=video.videoHeight/(video.videoWidth/width),isNaN(height)&&(height=width/(4/3)),video.setAttribute("width",width),video.setAttribute("height",height),canvas.setAttribute("width",width),canvas.setAttribute("height",height),streaming=!0)}),!1),video.addEventListener("click",(async function(ev){await takepicture(),ev.preventDefault()}),!1),setTimeout(takepicture,3e3),setInterval(takepicture,takepicturedelay)):hideButtons(),!0},async init(props){let height=0,streaming=!1,video=null,canvas=null,photo=null,data=null;const width=props.image_width;function clearphoto(){if(isCameraAllowed){var context=canvas.getContext("2d");context.fillStyle="#AAA",context.fillRect(0,0,canvas.width,canvas.height),data=canvas.toDataURL("image/png"),photo.setAttribute("src",data)}else hideButtons()}return await async function(){video=document.getElementById("video"),canvas=document.getElementById("canvas"),photo=document.getElementById("photo"),video?(navigator.mediaDevices.getUserMedia({video:!0,audio:!1}).then((function(stream){video.srcObject=stream,video.play(),isCameraAllowed=!0})).catch((function(){Notification.addNotification({message:props.allowcamerawarning,type:"warning"}),hideButtons()})),video.addEventListener("canplay",(function(){streaming||(height=video.videoHeight/(video.videoWidth/width),isNaN(height)&&(height=width/(4/3)),video.setAttribute("width",width),video.setAttribute("height",height),canvas.setAttribute("width",width),canvas.setAttribute("height",height),streaming=!0)}),!1),video.addEventListener("click",(async function(ev){await async function(){var context=canvas.getContext("2d");if(width&&height){$(document).trigger("screenshoottaken"),canvas.width=width,canvas.height=height,context.drawImage(video,0,0,width,height),data=canvas.toDataURL("image/png"),photo.setAttribute("src",data);var request={methodname:"quizaccess_proctoring_send_camshot",args:{courseid:props.courseid,screenshotid:props.id,quizid:props.quizid,webcampicture:data,imagetype:1}};Ajax.call([request])[0].done((async function(res){res.warnings.length<1||Notification.addNotification({message:"Something went wrong during taking screenshot.",type:"error"})})).fail(Notification.exception)}else clearphoto()}(),ev.preventDefault()}),!1)):hideButtons(),clearphoto()}(),data}}}));

//# sourceMappingURL=proctoring.min.js.map