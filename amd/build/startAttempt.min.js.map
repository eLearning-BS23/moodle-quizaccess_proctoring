{"version":3,"file":"startAttempt.min.js","sources":["../src/startAttempt.js"],"sourcesContent":["define(['jquery', 'core/ajax', 'core/notification'],\n    function($, Ajax, Notification) {\n        // Function to draw image from the box data.\n        const extractFaceFromBox = async(imageRef, box, croppedImage) => {\n            const regionsToExtract = [\n                // eslint-disable-next-line no-undef\n                new faceapi.Rect(box.x, box.y, box.width, box.height)\n            ];\n            // eslint-disable-next-line no-undef\n            let faceImages = await faceapi.extractFaces(imageRef, regionsToExtract);\n\n            if (faceImages.length === 0) {\n                // eslint-disable-next-line no-console\n                console.log('Face not found');\n            } else {\n                // eslint-disable-next-line no-console\n                faceImages.forEach((cnv) => {\n                    croppedImage.src = cnv.toDataURL();\n                });\n            }\n        };\n        const detectface = async(input, croppedImage) => {\n            // eslint-disable-next-line no-undef\n            const output = await faceapi.detectAllFaces(input);\n            if (output.length === 0) {\n                // eslint-disable-next-line no-console\n            } else {\n                // eslint-disable-next-line no-console\n                let detections = output[0].box;\n                await extractFaceFromBox(input, detections, croppedImage);\n            }\n        };\n        return {\n            setup: async function(props, modelurl) {\n                await faceapi.nets.ssdMobilenetv1.loadFromUri(modelurl);\n\n                $('#fcvalidate').append('<img id=\"validate-cropimg\" style=\"display: none;\" src=\"\" alt=\"\"/>');\n                $(\"#fcvalidate\").click(async function(event) {\n\n                    event.preventDefault();\n                    const photo = document.getElementById('photo');\n                    const canvas = document.getElementById('canvas');\n                    const video = document.getElementById('video');\n                    const context = canvas.getContext('2d');\n                    canvas.width = props.imagewidth;\n\n                    canvas.height = canvas.width / (4/3);\n                    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n                    var data = canvas.toDataURL('image/png');\n                    photo.setAttribute('src', data);\n\n                    const courseid = document.getElementById('courseidval').value;\n                    const cmid = document.getElementById('cmidval').value;\n                    const profileimage = document.getElementById('profileimage').value;\n\n                    // Getting the face image from screenshot.\n                    let croppedImage = $('#validate-cropimg');\n                    await detectface(photo, croppedImage);\n\n                    let faceFound;\n                    let faceImage;\n                    if (croppedImage.src) {\n                        // eslint-disable-next-line no-console\n                        console.log(\"Face found\");\n                        faceFound = 1;\n                        faceImage = croppedImage.src;\n                    } else {\n                        // eslint-disable-next-line no-console\n                        console.log(\"Face not found\");\n                        faceFound = 0;\n                        faceImage = \"\";\n                    }\n                    const wsfunction = 'quizaccess_proctoring_validate_face';\n                    const params = {\n                        'courseid': courseid,\n                        'cmid': cmid,\n                        'profileimage': profileimage,\n                        'webcampicture': data,\n                        'parenttype': 'camshot_image',\n                        'faceimage': faceImage,\n                        'facefound': faceFound,\n                    };\n\n                    const request = {\n                        methodname: wsfunction,\n                        args: params\n                    };\n                    document.getElementById('loading_spinner').style.display = 'block';\n                    Ajax.call([request])[0].done(function(res) {\n                        if (res.warnings.length < 1) {\n                            document.getElementById('loading_spinner').style.display = 'none';\n                            var status = res.status;\n                            if (status === 'success') {\n                                $(\"#video\").css(\"border\", \"10px solid green\");\n                                $(\"#face_validation_result\").html('<span style=\"color: green\">True</span>');\n                                document.getElementById(\"fcvalidate\").style.display = \"none\";\n                                $(\"#form_activate\").css(\"visibility\", \"visible\");\n                            } else {\n                                $(\"#video\").css(\"border\", \"10px solid red\");\n                                $(\"#face_validation_result\").html('<span style=\"color: red\">False</span>');\n                            }\n                        } else {\n                            document.getElementById('loading_spinner').style.display = 'none';\n                            if (video) {\n                                Notification.addNotification({\n                                    message: 'Something went wrong during taking the image.',\n                                    type: 'error'\n                                });\n                            }\n                        }\n                    }).fail(Notification.exception);\n\n                });\n\n                return true;\n            }\n        };\n    });\n"],"names":["define","$","Ajax","Notification","detectface","async","input","croppedImage","output","faceapi","detectAllFaces","length","detections","box","imageRef","regionsToExtract","Rect","x","y","width","height","faceImages","extractFaces","console","log","forEach","cnv","src","toDataURL","extractFaceFromBox","setup","props","modelurl","nets","ssdMobilenetv1","loadFromUri","append","click","event","preventDefault","photo","document","getElementById","canvas","video","context","getContext","imagewidth","drawImage","data","setAttribute","courseid","value","cmid","profileimage","faceFound","faceImage","request","methodname","args","style","display","call","done","res","warnings","status","css","html","addNotification","message","type","fail","exception"],"mappings":"AAAAA,4CAAO,CAAC,SAAU,YAAa,sBAC3B,SAASC,EAAGC,KAAMC,oBAoBRC,WAAaC,MAAMC,MAAOC,sBAEtBC,aAAeC,QAAQC,eAAeJ,UACtB,IAAlBE,OAAOG,YAEJ,KAECC,WAAaJ,OAAO,GAAGK,SAzBRR,OAAMS,SAAUD,IAAKN,sBACtCQ,iBAAmB,CAErB,IAAIN,QAAQO,KAAKH,IAAII,EAAGJ,IAAIK,EAAGL,IAAIM,MAAON,IAAIO,aAG9CC,iBAAmBZ,QAAQa,aAAaR,SAAUC,kBAE5B,IAAtBM,WAAWV,OAEXY,QAAQC,IAAI,kBAGZH,WAAWI,SAASC,MAChBnB,aAAaoB,IAAMD,IAAIE,gBAYrBC,CAAmBvB,MAAOM,WAAYL,sBAG7C,CACHuB,MAAOzB,eAAe0B,MAAOC,uBACnBvB,QAAQwB,KAAKC,eAAeC,YAAYH,UAE9C/B,EAAE,eAAemC,OAAO,qEACxBnC,EAAE,eAAeoC,OAAMhC,eAAeiC,OAElCA,MAAMC,uBACAC,MAAQC,SAASC,eAAe,SAChCC,OAASF,SAASC,eAAe,UACjCE,MAAQH,SAASC,eAAe,SAChCG,QAAUF,OAAOG,WAAW,MAClCH,OAAOxB,MAAQY,MAAMgB,WAErBJ,OAAOvB,OAASuB,OAAOxB,OAAS,EAAE,GAClC0B,QAAQG,UAAUJ,MAAO,EAAG,EAAGD,OAAOxB,MAAOwB,OAAOvB,YAChD6B,KAAON,OAAOf,UAAU,aAC5BY,MAAMU,aAAa,MAAOD,YAEpBE,SAAWV,SAASC,eAAe,eAAeU,MAClDC,KAAOZ,SAASC,eAAe,WAAWU,MAC1CE,aAAeb,SAASC,eAAe,gBAAgBU,UAMzDG,UACAC,UAJAjD,aAAeN,EAAE,2BACfG,WAAWoC,MAAOjC,cAIpBA,aAAaoB,KAEbJ,QAAQC,IAAI,cACZ+B,UAAY,EACZC,UAAYjD,aAAaoB,MAGzBJ,QAAQC,IAAI,kBACZ+B,UAAY,EACZC,UAAY,UAaVC,QAAU,CACZC,WAZe,sCAafC,KAZW,UACCR,cACJE,kBACQC,2BACCL,gBACH,0BACDO,oBACAD,YAOjBd,SAASC,eAAe,mBAAmBkB,MAAMC,QAAU,QAC3D3D,KAAK4D,KAAK,CAACL,UAAU,GAAGM,MAAK,SAASC,KAC9BA,IAAIC,SAAStD,OAAS,GACtB8B,SAASC,eAAe,mBAAmBkB,MAAMC,QAAU,OAE5C,YADFG,IAAIE,QAEbjE,EAAE,UAAUkE,IAAI,SAAU,oBAC1BlE,EAAE,2BAA2BmE,KAAK,0CAClC3B,SAASC,eAAe,cAAckB,MAAMC,QAAU,OACtD5D,EAAE,kBAAkBkE,IAAI,aAAc,aAEtClE,EAAE,UAAUkE,IAAI,SAAU,kBAC1BlE,EAAE,2BAA2BmE,KAAK,4CAGtC3B,SAASC,eAAe,mBAAmBkB,MAAMC,QAAU,OACvDjB,OACAzC,aAAakE,gBAAgB,CACzBC,QAAS,gDACTC,KAAM,cAInBC,KAAKrE,aAAasE,eAIlB"}