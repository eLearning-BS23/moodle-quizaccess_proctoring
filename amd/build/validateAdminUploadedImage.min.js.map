{"version":3,"file":"validateAdminUploadedImage.min.js","sources":["../src/validateAdminUploadedImage.js"],"sourcesContent":["define(['jquery', 'core/ajax', 'core/notification', 'core/str'],\n    function($, Ajax, Notification, Str) {\n\n        const loadStrings = async function() {\n            const stringkeys = [\n                {key: 'facefound', component: 'quizaccess_proctoring'},\n                {key: 'facenotfound', component: 'quizaccess_proctoring'},\n            ];\n            try {\n                const strings = await Str.get_strings(stringkeys);\n                return {\n                    facefound: strings[0],\n                    facenotfound: strings[1]\n                };\n            } catch (error) {\n                Notification.exception(error);\n            }\n        };\n\n        let notificationShown = 0;\n\n        const clearPreviousNotifications = () => {\n            try {\n                let alerts = document.getElementsByClassName('alert');\n                if(alerts.length > 0) {\n                    Array.from(alerts).forEach(alert => {\n                        alert.style.display = 'none';\n                    });\n                    notificationShown = 0;\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        };\n\n        const displayNotification = (message, type) => {\n            Notification.addNotification({\n                message,\n                type\n            });\n        };\n\n        // Function to draw image from the box data.\n        const extractFaceFromBox = async(imageRef, box, croppedImage) => {\n            const regionsToExtract = [\n                new faceapi.Rect(box.x, box.y, box.width, box.height)\n            ];\n            let faceImages = await faceapi.extractFaces(imageRef, regionsToExtract);\n            if (faceImages.length > 0) {\n                faceImages.forEach((cnv) => {\n                    croppedImage.src = cnv.toDataURL();\n                });\n            }\n        };\n\n        // Function to detect face from the image.\n        const detectface = async(input, croppedImage) => {\n            const output = await faceapi.detectAllFaces(input);\n            if (output.length > 0) {\n                let detections = output[0].box;\n                await extractFaceFromBox(input, detections, croppedImage);\n            }\n        };\n\n        return {\n            async setup(modelurl) {\n                await faceapi.nets.ssdMobilenetv1.loadFromUri(modelurl);\n                $('#fitem_id_user_photo').append(\n                '<img id=\"cropimg\" style=\"display:none;\"/><img id=\"previewimg\" style=\"display:none;\" height=\"auto\"width=\"auto\"/>');\n                let submitBtn = document.getElementById('id_submitbutton');\n                let croppedImage = $('#cropimg');\n\n                let previewImage;\n                if (submitBtn) {\n                    submitBtn.disabled = true;\n                }\n\n                setInterval(getPreviewImage, 1000);\n                /**\n                 * Checks for the preview image in the dom\n                 *\n                 */\n                async function getPreviewImage() {\n                    let preview = document.getElementsByClassName('realpreview');\n                    const strings = await loadStrings();\n                    if (preview.length > 0) {\n                       \n                        previewImage = document.getElementById('previewimg');\n                        let imageUrlString = preview[0].src;\n                        const splitArray = imageUrlString.split(\"?\");\n\n                        if (previewImage.src !== splitArray[0]) {\n                            previewImage.src = splitArray[0];\n                        } else {\n                            return;\n                        }\n\n                        await detectface(previewImage, croppedImage);\n\n                        if (croppedImage.src) {\n                            \n                            if (submitBtn) {\n                                submitBtn.disabled = false;\n                            }\n\n                            clearPreviousNotifications();\n                            if (notificationShown == 0) {\n                                displayNotification(strings.facefound, 'success');\n                                notificationShown = 1;\n                            }\n\n                            let faceImageField = document.querySelector('[name=\"face_image\"]');\n                            \n                            if (faceImageField) {\n                                faceImageField.setAttribute('value', croppedImage.src);\n                            }\n                            croppedImage.src = null;\n                        } else {\n                            clearPreviousNotifications();\n                            if (notificationShown == 0) {\n                                displayNotification(strings.facenotfound, 'error');\n                                notificationShown = 1;\n                                submitBtn.disabled = true;\n                            }\n                            croppedImage.src = null;\n                            let faceImageField = document.querySelector('[name=\"face_image\"]');\n                            if (faceImageField) {\n                                faceImageField.setAttribute('value', croppedImage.src);\n                            }\n                \n                        }\n                    } else {\n                        if(submitBtn) {\n                            submitBtn.disabled = true;\n                        }\n                    }\n                }\n                return true;\n            }\n        };\n    });\n"],"names":["define","$","Ajax","Notification","Str","notificationShown","clearPreviousNotifications","alerts","document","getElementsByClassName","length","Array","from","forEach","alert","style","display","error","console","log","displayNotification","message","type","addNotification","detectface","async","input","croppedImage","output","faceapi","detectAllFaces","detections","box","imageRef","regionsToExtract","Rect","x","y","width","height","faceImages","extractFaces","cnv","src","toDataURL","extractFaceFromBox","modelurl","nets","ssdMobilenetv1","loadFromUri","append","previewImage","submitBtn","getElementById","disabled","setInterval","preview","strings","stringkeys","key","component","get_strings","facefound","facenotfound","exception","loadStrings","splitArray","split","faceImageField","querySelector","setAttribute"],"mappings":"AAAAA,0DAAO,CAAC,SAAU,YAAa,oBAAqB,aAChD,SAASC,EAAGC,KAAMC,aAAcC,SAkBxBC,kBAAoB,QAElBC,2BAA6B,aAEvBC,OAASC,SAASC,uBAAuB,SAC1CF,OAAOG,OAAS,IACfC,MAAMC,KAAKL,QAAQM,SAAQC,QACvBA,MAAMC,MAAMC,QAAU,UAE1BX,kBAAoB,GAE1B,MAAOY,OACLC,QAAQC,IAAIF,SAIdG,oBAAsB,CAACC,QAASC,QAClCnB,aAAaoB,gBAAgB,CACzBF,QAAAA,QACAC,KAAAA,QAkBFE,WAAaC,MAAMC,MAAOC,sBACtBC,aAAeC,QAAQC,eAAeJ,UACxCE,OAAOlB,OAAS,EAAG,KACfqB,WAAaH,OAAO,GAAGI,SAhBRP,OAAMQ,SAAUD,IAAKL,sBACtCO,iBAAmB,CACrB,IAAIL,QAAQM,KAAKH,IAAII,EAAGJ,IAAIK,EAAGL,IAAIM,MAAON,IAAIO,aAE9CC,iBAAmBX,QAAQY,aAAaR,SAAUC,kBAClDM,WAAW9B,OAAS,GACpB8B,WAAW3B,SAAS6B,MAChBf,aAAagB,IAAMD,IAAIE,gBAUrBC,CAAmBnB,MAAOK,WAAYJ,sBAI7C,aACSmB,gBACFjB,QAAQkB,KAAKC,eAAeC,YAAYH,UAC9C7C,EAAE,wBAAwBiD,OAC1B,uHAIIC,aAHAC,UAAY5C,SAAS6C,eAAe,mBACpC1B,aAAe1B,EAAE,mBAGjBmD,YACAA,UAAUE,UAAW,GAGzBC,kCAMQC,QAAUhD,SAASC,uBAAuB,qBACxCgD,cAjFEhC,uBACViC,WAAa,CACf,CAACC,IAAK,YAAaC,UAAW,yBAC9B,CAACD,IAAK,eAAgBC,UAAW,oCAG3BH,cAAgBrD,IAAIyD,YAAYH,kBAC/B,CACHI,UAAWL,QAAQ,GACnBM,aAAcN,QAAQ,IAE5B,MAAOxC,OACLd,aAAa6D,UAAU/C,QAqEGgD,MAClBT,QAAQ9C,OAAS,EAAG,CAEpByC,aAAe3C,SAAS6C,eAAe,oBAEjCa,WADeV,QAAQ,GAAGb,IACEwB,MAAM,QAEpChB,aAAaR,MAAQuB,WAAW,aAChCf,aAAaR,IAAMuB,WAAW,SAK5B1C,WAAW2B,aAAcxB,cAE3BA,aAAagB,IAAK,CAEdS,YACAA,UAAUE,UAAW,GAGzBhD,6BACyB,GAArBD,oBACAe,oBAAoBqC,QAAQK,UAAW,WACvCzD,kBAAoB,OAGpB+D,eAAiB5D,SAAS6D,cAAc,uBAExCD,gBACAA,eAAeE,aAAa,QAAS3C,aAAagB,KAEtDhB,aAAagB,IAAM,SAChB,CACHrC,6BACyB,GAArBD,oBACAe,oBAAoBqC,QAAQM,aAAc,SAC1C1D,kBAAoB,EACpB+C,UAAUE,UAAW,GAEzB3B,aAAagB,IAAM,SACfyB,eAAiB5D,SAAS6D,cAAc,uBACxCD,gBACAA,eAAeE,aAAa,QAAS3C,aAAagB,WAKvDS,YACCA,UAAUE,UAAW,KAxDJ,MA4DtB"}