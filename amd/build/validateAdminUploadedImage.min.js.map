{"version":3,"file":"validateAdminUploadedImage.min.js","sources":["../src/validateAdminUploadedImage.js"],"sourcesContent":["define(['jquery', 'core/ajax', 'core/notification', 'core/str'],\n    function ($, Ajax, Notification, str) {\n\n        // Function to draw image from the box data.\n        const extractFaceFromBox = async (imageRef, box, croppedImage) => {\n            const regionsToExtract = [\n                new faceapi.Rect(box.x, box.y, box.width, box.height)\n            ];\n            let faceImages = await faceapi.extractFaces(imageRef, regionsToExtract);\n\n            if (faceImages.length === 0) {\n                \n                console.log('Face not found');\n            } else {\n                \n                faceImages.forEach((cnv) => {\n                    croppedImage.src = cnv.toDataURL();\n                });\n            }\n        };\n        const detectface = async (input, croppedImage) => {\n            \n            const output = await faceapi.detectAllFaces(input);\n            if (output.length === 0) {\n                console.log(\"Face not found\");\n            } else {\n                \n                let detections = output[0].box;\n                await extractFaceFromBox(input, detections, croppedImage);\n            }\n        };\n\n        let getDataUrl = (studentimg) => {\n            const canvas = document.createElement(\"canvas\");\n            const ctx = canvas.getContext(\"2d\");\n            // Set width and height\n            canvas.width = studentimg.width;\n            canvas.height = studentimg.height;\n            // Draw the image\n            ctx.drawImage(studentimg, 0, 0);\n            return canvas.toDataURL(\"image/png\");\n        };\n        return {\n            async setup (modelurl) {\n                \n                \n                await faceapi.nets.ssdMobilenetv1.loadFromUri(modelurl);\n\n                $('#fitem_id_user_photo').append(\n                    '<img id=\"cropimg\" style=\"display:none;\"/><img id=\"previewimg\" style=\"display:none;\" height=\"auto\" width=\"auto\"/>');\n                let submitBtn = document.getElementById('id_submitbutton');\n                let previewImage;\n                if(submitBtn) {\n                    submitBtn.style.display = 'none';\n                }\n\n                const intervalToGetImage = setInterval(getPreviewImage, 1000);\n                let notificationShown = 0;\n                let croppedImage = $('#cropimg');\n                async function getPreviewImage() {\n                       \n                    let preview = document.getElementsByClassName('realpreview');\n                    if(preview.length > 0) {\n                       \n                        previewImage = document.getElementById('previewimg');\n                        let imageUrlString = preview[0].src;\n\n                        const splitArray = imageUrlString.split(\"?\");\n                        \n                        previewImage.src = splitArray[0];\n                        let faceFound;\n                        \n                        await detectface(previewImage, croppedImage);\n                        \n                        console.log(previewImage.src);\n                        console.log(croppedImage.src);\n                        if(croppedImage.src) {\n                            console.log(\"Face found\");\n                            if(submitBtn) {\n                                submitBtn.style.display = 'block';\n                                stopInterval();\n                            }\n\n                            let alertDangers = document.getElementsByClassName('alert-danger');\n                            if(alertDangers.length > 0) {\n                                alertDangers[0].style.display = 'none';\n                                console.log(alertDangers[0]);\n                            }\n\n                            Notification.addNotification({\n                                message: 'Face found in the uploaded image',\n                                type: 'success'\n                            });\n                            \n                        } else {\n                            \n                            if(notificationShown == 0) {\n                                Notification.addNotification({\n                                    message: 'Face not found in the uploaded image',\n                                    type: 'error'\n                                });\n                                notificationShown = 1;\n                            }\n                            \n                            if(submitBtn) {\n                                submitBtn.style.display = 'none';\n                                //stopInterval();\n                            }\n                            previewImage.src = \"\";\n                            \n                            console.log(\"Face not found\");\n                        }\n                        \n                    } else {\n                        if(submitBtn) {\n                            submitBtn.style.display = 'none';\n                        }\n                    }  \n                }\n\n                function stopInterval() {\n                    clearInterval(intervalToGetImage);\n                }\n                \n                return true;\n            }\n        };\n    });\n"],"names":["define","$","Ajax","Notification","str","detectface","async","input","croppedImage","output","faceapi","detectAllFaces","length","console","log","detections","box","imageRef","regionsToExtract","Rect","x","y","width","height","faceImages","extractFaces","forEach","cnv","src","toDataURL","extractFaceFromBox","modelurl","nets","ssdMobilenetv1","loadFromUri","append","previewImage","submitBtn","document","getElementById","style","display","intervalToGetImage","setInterval","preview","getElementsByClassName","splitArray","split","clearInterval","alertDangers","addNotification","message","type","notificationShown"],"mappings":"AAAAA,0DAAO,CAAC,SAAU,YAAa,oBAAqB,aAChD,SAAUC,EAAGC,KAAMC,aAAcC,WAmBvBC,WAAaC,MAAOC,MAAOC,sBAEvBC,aAAeC,QAAQC,eAAeJ,UACtB,IAAlBE,OAAOG,OACPC,QAAQC,IAAI,sBACT,KAECC,WAAaN,OAAO,GAAGO,SAvBRV,OAAOW,SAAUD,IAAKR,sBACvCU,iBAAmB,CACrB,IAAIR,QAAQS,KAAKH,IAAII,EAAGJ,IAAIK,EAAGL,IAAIM,MAAON,IAAIO,aAE9CC,iBAAmBd,QAAQe,aAAaR,SAAUC,kBAE5B,IAAtBM,WAAWZ,OAEXC,QAAQC,IAAI,kBAGZU,WAAWE,SAASC,MAChBnB,aAAaoB,IAAMD,IAAIE,gBAYrBC,CAAmBvB,MAAOQ,WAAYP,sBAc7C,aACUuB,gBAGHrB,QAAQsB,KAAKC,eAAeC,YAAYH,UAE9C9B,EAAE,wBAAwBkC,OACtB,wHAEAC,aADAC,UAAYC,SAASC,eAAe,mBAErCF,YACCA,UAAUG,MAAMC,QAAU,cAGxBC,mBAAqBC,kCAKnBC,QAAUN,SAASO,uBAAuB,kBAC3CD,QAAQhC,OAAS,EAAG,CAEnBwB,aAAeE,SAASC,eAAe,oBAGjCO,WAFeF,QAAQ,GAAGhB,IAEEmB,MAAM,QAExCX,aAAaR,IAAMkB,WAAW,SAGxBzC,WAAW+B,aAAc5B,cAE/BK,QAAQC,IAAIsB,aAAaR,KACzBf,QAAQC,IAAIN,aAAaoB,KACtBpB,aAAaoB,IAAK,CACjBf,QAAQC,IAAI,cACTuB,YACCA,UAAUG,MAAMC,QAAU,QA0CtCO,cAAcN,yBAtCFO,aAAeX,SAASO,uBAAuB,gBAChDI,aAAarC,OAAS,IACrBqC,aAAa,GAAGT,MAAMC,QAAU,OAChC5B,QAAQC,IAAImC,aAAa,KAG7B9C,aAAa+C,gBAAgB,CACzBC,QAAS,mCACTC,KAAM,iBAKc,GAArBC,oBACClD,aAAa+C,gBAAgB,CACzBC,QAAS,uCACTC,KAAM,UAEVC,kBAAoB,GAGrBhB,YACCA,UAAUG,MAAMC,QAAU,QAG9BL,aAAaR,IAAM,GAEnBf,QAAQC,IAAI,uBAIbuB,YACCA,UAAUG,MAAMC,QAAU,UA3DkB,SACpDY,kBAAoB,EACpB7C,aAAeP,EAAE,mBAkEd"}