{"version":3,"file":"validateAdminUploadedImage.min.js","sources":["../src/validateAdminUploadedImage.js"],"sourcesContent":["define(['jquery', 'core/ajax', 'core/notification'],\n    function ($, Ajax, Notification) {\n\n\n        \n        // Function to draw image from the box data.\n        const extractFaceFromBox = async (imageRef, box, croppedImage) => {\n            const regionsToExtract = [\n                new faceapi.Rect(box.x, box.y, box.width, box.height)\n            ];\n            let faceImages = await faceapi.extractFaces(imageRef, regionsToExtract);\n\n            if (faceImages.length === 0) {\n                \n                console.log('Face not found');\n            } else {\n                \n                faceImages.forEach((cnv) => {\n                    croppedImage.src = cnv.toDataURL();\n                });\n            }\n        };\n        const detectface = async (input, croppedImage) => {\n            \n            const output = await faceapi.detectAllFaces(input);\n            if (output.length === 0) {\n                \n            } else {\n                \n                let detections = output[0].box;\n                await extractFaceFromBox(input, detections, croppedImage);\n            }\n        };\n\n        let getDataUrl = (studentimg) => {\n            const canvas = document.createElement(\"canvas\");\n            const ctx = canvas.getContext(\"2d\");\n            // Set width and height\n            canvas.width = studentimg.width;\n            canvas.height = studentimg.height;\n            // Draw the image\n            ctx.drawImage(studentimg, 0, 0);\n            return canvas.toDataURL(\"image/png\");\n        };\n        return {\n            async setup (modelurl) {\n                \n                \n                await faceapi.nets.ssdMobilenetv1.loadFromUri(modelurl);\n\n                $('#fitem_id_user_photo').append(\n                    '<img id=\"cropimg\" style=\"display:none;\"/><img id=\"previewimg\" style=\"display:none;\" height=\"auto\" width=\"auto\"/>');\n                let submitBtn = document.getElementById('id_submitbutton');\n                let previewImage;\n                if(submitBtn) {\n                    submitBtn.style.display = 'none';\n                }\n\n                const intervalToGetImage = setInterval(getPreviewImage, 1000);\n                let previewImageData;\n                let croppedImage = $('#cropimg');\n                async function getPreviewImage() {\n                       \n                    let preview = document.getElementsByClassName('realpreview');\n                    if(preview) {\n                        // console.log(preview.length);\n                        // console.log(preview[0].src);\n                        // previewImage = preview[0];\n                        previewImage = document.getElementById('previewimg');\n                        let imageUrlString = preview[0].src;\n\n                        //testImage.src = preview[0].src;\n                        const splitArray = imageUrlString.split(\"?\");\n                        // console.log(splitArray[0]);\n                        previewImage.src = splitArray[0];\n                        let faceFound;\n                        // if(previewImage) {\n                        //     // From file to base64. \n                        //     previewImageData = getDataUrl(previewImage);\n                        // }\n                        // console.log(previewImageData);\n                        await detectface(previewImage, croppedImage);\n                        \n                        console.log(previewImage.src);\n                        console.log(croppedImage.src);\n                        if(croppedImage.src) {\n                            console.log(\"Face found\");\n                            if(submitBtn) {\n                                submitBtn.style.display = 'block';\n                            }\n                        } else {\n                            console.log(\"Face not found\");\n                        }\n                        stopInterval();\n                    }   \n                }\n\n                function stopInterval() {\n                    clearInterval(intervalToGetImage);\n                }\n                \n                return true;\n            }\n        };\n    });\n"],"names":["define","$","Ajax","Notification","detectface","async","input","croppedImage","output","faceapi","detectAllFaces","length","detections","box","imageRef","regionsToExtract","Rect","x","y","width","height","faceImages","extractFaces","console","log","forEach","cnv","src","toDataURL","extractFaceFromBox","modelurl","nets","ssdMobilenetv1","loadFromUri","append","previewImage","submitBtn","document","getElementById","style","display","intervalToGetImage","setInterval","preview","getElementsByClassName","splitArray","split","clearInterval"],"mappings":"AAAAA,0DAAO,CAAC,SAAU,YAAa,sBAC3B,SAAUC,EAAGC,KAAMC,oBAqBTC,WAAaC,MAAOC,MAAOC,sBAEvBC,aAAeC,QAAQC,eAAeJ,UACtB,IAAlBE,OAAOG,YAEJ,KAECC,WAAaJ,OAAO,GAAGK,SAvBRR,OAAOS,SAAUD,IAAKN,sBACvCQ,iBAAmB,CACrB,IAAIN,QAAQO,KAAKH,IAAII,EAAGJ,IAAIK,EAAGL,IAAIM,MAAON,IAAIO,aAE9CC,iBAAmBZ,QAAQa,aAAaR,SAAUC,kBAE5B,IAAtBM,WAAWV,OAEXY,QAAQC,IAAI,kBAGZH,WAAWI,SAASC,MAChBnB,aAAaoB,IAAMD,IAAIE,gBAYrBC,CAAmBvB,MAAOM,WAAYL,sBAc7C,aACUuB,gBAGHrB,QAAQsB,KAAKC,eAAeC,YAAYH,UAE9C7B,EAAE,wBAAwBiC,OACtB,wHAEAC,aADAC,UAAYC,SAASC,eAAe,mBAErCF,YACCA,UAAUG,MAAMC,QAAU,cAGxBC,mBAAqBC,kCAKnBC,QAAUN,SAASO,uBAAuB,kBAC3CD,QAAS,CAIRR,aAAeE,SAASC,eAAe,oBAIjCO,WAHeF,QAAQ,GAAGhB,IAGEmB,MAAM,KAExCX,aAAaR,IAAMkB,WAAW,SAOxBzC,WAAW+B,aAAc5B,cAE/BgB,QAAQC,IAAIW,aAAaR,KACzBJ,QAAQC,IAAIjB,aAAaoB,KACtBpB,aAAaoB,KACZJ,QAAQC,IAAI,cACTY,YACCA,UAAUG,MAAMC,QAAU,UAG9BjB,QAAQC,IAAI,kBAOpBuB,cAAcN,uBAxCsC,SAEpDlC,aAAeN,EAAE,mBAyCd"}